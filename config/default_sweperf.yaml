instances:
  type: swe_perf
  subset: full
  split: test
  shuffle: true
  evaluate: true
  use_cpu_groups: true
  deployment:
    type: docker
    remove_images: true
    remove_container: true
agent:
  model:
    # name: gemini/gemini-2.5-flash
    # name: gemini/gemini-2.5-pro
    name: gemini/gemini-2.5-flash-lite-preview-06-17
    # name: gemini/gemini-2.0-flash
    # Put your Gemini API key in the .env file as GEMINI_API_KEY=...
    per_instance_cost_limit: 2.0
    per_instance_call_limit: 100
    temperature: 0.0
    delay: 2.0
    retry:
      retries: 25
      min_wait: 5
      max_wait: 120
  templates:
    system_template: |-
      You are a helpful assistant that can interact with a computer to solve tasks.
    instance_template: |-
      <uploaded_files>
      {{working_dir}}
      </uploaded_files>

      Iâ€™ve uploaded a python code repository in the directory workspace_dir_name. Consider the following python workload showing a specific usage and measured performance of the repository:
      <performance_workload>
      {{workload}}
      </performance_workload>

      Can you help me implement the necessary changes to the repository so that the runtime of the `workload()` function is faster? Basic guidelines:
      1. Your task is to make changes to non-test files in the /workspace directory to improve the performance of the code running in `workload()`. Please do not directly change the implementation of the `workload()` function: I want you to focus on making the workload AS IS run faster by only editing the repository containing code that the `workload()` function calls.
      2. Make changes while ensuring the repository is functionally equivalent to the original: your changes should not introduce new bugs or cause already-passing tests to begin failing after your changes. However, you can ignore tests that already fail without any changes made. For test files you find in the repository that are relevant to the changes you make, you can run them via the bash command `{{test_cmd}}` followed by the path of the testfile of interest. Note that running the entire repo tests may take a long time, so you should need to determine which tests are relevant to your changes and always try to run this command with a specific test file path.
      3. Make sure the `workload()` function improves in performance after you make changes to the repository. The workload can potentially take some time to run, so please allow it to finish: for iterative testing purposes, you can adjust the workload script to use fewer iterations. Before you complete your task, please make sure to check that the **original performance workload** and `workload()` function runs successfully and the performance is improved.
      4. You may need to reinstall/rebuild the repo for your changes to take effect before testing. Reinstalling may take a long time to run, so please be patient with running it and allow it to complete if possible. You can reinstall the repository by running the bash command `{{rebuild_cmd}}` in the workspace directory.
      5. All the dependencies required to run the `workload()` function are already installed in the environment. You should not install or upgrade any dependencies.

      Follow these steps to improve performance:
      1. As a first step, explore the repository structure.
      2. Create a Python script to reproduce the performance workload, execute it with python <workload_file>, and examine the printed output metrics.
      3. Edit the source code of the repository to improve performance. Please do not change the contents of the `workload()` function itself, but focus on optimizing the code in the repository that the original `workload()` function uses.
      4. Rebuild and rerun your script to confirm that performance has improved.
      5. If necessary, identify any test file paths in the repository related to your changes and verify that test statuses did not change after your modifications.
      6. After each attempted change, please reflect on the changes attempted and the performance impact observed. If the performance did not improve, consider alternative approaches or optimizations.
      7. Once you are satisfied, please use the finish command to complete your task.

      Please remember that you should not directly change the implementation of the `workload()` function. The performance improvement should solely come from editing the source files in the code repository.
    next_step_template: |-
      OBSERVATION:
      {{observation}}
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
  tools:
    execution_timeout: 900
    total_execution_timeout: 7200
    env_variables:
      PAGER: cat
      MANPAGER: cat
      LESS: -R
      PIP_PROGRESS_BAR: 'off'
      TQDM_DISABLE: '1'
      GIT_PAGER: cat
    bundles:
      - path: tools/registry
      - path: tools/edit_anthropic
      - path: tools/review_on_submit_m
    registry_variables:
      USE_FILEMAP: 'true'
      SUBMIT_REVIEW_MESSAGES:
        - |
          Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

          1. If you made any changes to your code after running the reproduction script, please run the reproduction script again.
            If the reproduction script is failing, please revisit your changes and make sure they are correct.
            If you have already removed your reproduction script, please ignore this step.
          2. Remove your reproduction script (if you haven't done so already).
          3. If you have modified any TEST files, please revert them to the state they had before you started fixing the issue.
            You can do this with `git checkout -- /path/to/test/file.py`. Use below <diff> to find the files you need to revert.
          4. Run the submit command again to confirm.

          Here is a list of all of your changes:

          <diff>
          {{diff}}
          </diff>
    enable_bash_tool: true
    parse_function:
      type: function_calling
  history_processors:
    - type: first_m_last_n_observations
      m: 4
      n: 100
